import os
import csv
import json
import geojson
import shutil
from geojson import Feature, MultiPoint, FeatureCollection

pmesii_dict = {'214': [34124101, 3, 4, 1, 2, 4, 1, 0, 1], '5': [41122101, 4, 1, 1, 2, 2, 1, 0, 1], '212': [34232321, 3, 4, 2, 3, 2, 3, 2, 1], '213': [31243211, 3, 1, 2, 4, 3, 2, 1, 1], '211': [31442321, 3, 1, 4, 4, 2, 3, 2, 1], '872': [24222101, 2, 4, 2, 2, 2, 1, 0, 1], '873': [24222101, 2, 4, 2, 2, 2, 1, 0, 1], '133': [42232101, 4, 2, 2, 3, 2, 1, 0, 1], '132': [32222101, 3, 2, 2, 2, 2, 1, 0, 1], '131': [21222101, 2, 1, 2, 2, 2, 1, 0, 1], '130': [22222101, 2, 2, 2, 2, 2, 1, 0, 1], '137': [33222101, 3, 3, 2, 2, 2, 1, 0, 1], '136': [32222101, 3, 2, 2, 2, 2, 1, 0, 1], '135': [32222101, 3, 2, 2, 2, 2, 1, 0, 1], '134': [32222101, 3, 2, 2, 2, 2, 1, 0, 1], '139': [23222101, 2, 3, 2, 2, 2, 1, 0, 1], '138': [24222101, 2, 4, 2, 2, 2, 1, 0, 1], '53': [41122101, 4, 1, 1, 2, 2, 1, 0, 1], '1832': [22231101, 2, 2, 2, 3, 1, 1, 0, 1], '1833': [22231101, 2, 2, 2, 3, 1, 1, 0, 1], '26': [32222101, 3, 2, 2, 2, 2, 1, 0, 1], '1831': [22231101, 2, 2, 2, 3, 1, 1, 0, 1], '20': [24241121, 2, 4, 2, 4, 1, 1, 2, 1], '21': [31243321, 3, 1, 2, 4, 3, 3, 2, 1], '22': [41123101, 4, 1, 1, 2, 3, 1, 0, 1], '23': [21423311, 2, 1, 4, 2, 3, 3, 1, 1], '28': [32232101, 3, 2, 2, 3, 2, 1, 0, 1], '94': [24134101, 2, 4, 1, 3, 4, 1, 0, 1], '344': [43222101, 4, 3, 2, 2, 2, 1, 0, 1], '0': [0, 0, 0, 0, 0, 0, 0, 0, 0], '341': [42222101, 4, 2, 2, 2, 2, 1, 0, 1], '342': [42222101, 4, 2, 2, 2, 2, 1, 0, 1], '343': [42232101, 4, 2, 2, 3, 2, 1, 0, 1], '811': [42232101, 4, 2, 2, 3, 2, 1, 0, 1], '812': [42232101, 4, 2, 2, 3, 2, 1, 0, 1], '813': [22232104, 2, 2, 2, 3, 2, 1, 0, 4], '814': [23222101, 2, 3, 2, 2, 2, 1, 0, 1], '87': [24222101, 2, 4, 2, 2, 2, 1, 0, 1], '1623': [32242101, 3, 2, 2, 4, 2, 1, 0, 1], '1313': [42222101, 4, 2, 2, 2, 2, 1, 0, 1], '1312': [32422101, 3, 2, 4, 2, 2, 1, 0, 1], '1311': [22422101, 2, 2, 4, 2, 2, 1, 0, 1], '1622': [34222101, 3, 4, 2, 2, 2, 1, 0, 1], '1621': [32422101, 3, 2, 4, 2, 2, 1, 0, 1], '120': [21112001, 2, 1, 1, 1, 2, 0, 0, 1], '121': [21112001, 2, 1, 1, 1, 2, 0, 0, 1], '122': [32112101, 3, 2, 1, 1, 2, 1, 0, 1], '123': [41132101, 4, 1, 1, 3, 2, 1, 0, 1], '124': [32222101, 3, 2, 2, 2, 2, 1, 0, 1], '125': [31121101, 3, 1, 1, 2, 1, 1, 0, 1], '126': [31121101, 3, 1, 1, 2, 1, 1, 0, 1], '127': [31121101, 3, 1, 1, 2, 1, 1, 0, 1], '128': [21131101, 2, 1, 1, 3, 1, 1, 0, 1], '129': [41121101, 4, 1, 1, 2, 1, 1, 0, 1], '84': [22222101, 2, 2, 2, 2, 2, 1, 0, 1], '91': [21134101, 2, 1, 1, 3, 4, 1, 0, 1], '55': [41122101, 4, 1, 1, 2, 2, 1, 0, 1], '54': [41122101, 4, 1, 1, 2, 2, 1, 0, 1], '57': [41122101, 4, 1, 1, 2, 2, 1, 0, 1], '56': [41122101, 4, 1, 1, 2, 2, 1, 0, 1], '1821': [22231101, 2, 2, 2, 3, 1, 1, 0, 1], '50': [41122101, 4, 1, 1, 2, 2, 1, 0, 1], '1823': [22231101, 2, 2, 2, 3, 1, 1, 0, 1], '1822': [22231101, 2, 2, 2, 3, 1, 1, 0, 1], '861': [23222101, 2, 3, 2, 2, 2, 1, 0, 1], '81': [32222101, 3, 2, 2, 2, 2, 1, 0, 1], '25': [33333101, 3, 3, 3, 3, 3, 1, 0, 1], '1384': [24222111, 2, 4, 2, 2, 2, 1, 1, 1], '1385': [24222111, 2, 4, 2, 2, 2, 1, 1, 1], '1412': [32243211, 3, 2, 2, 4, 3, 2, 1, 1], '1413': [32243211, 3, 2, 2, 4, 3, 2, 1, 1], '1414': [32243211, 3, 2, 2, 4, 3, 2, 1, 1], '1381': [34222101, 3, 4, 2, 2, 2, 1, 0, 1], '1382': [34222141, 3, 4, 2, 2, 2, 1, 4, 1], '1383': [24242111, 2, 4, 2, 4, 2, 1, 1, 1], '1322': [42232101, 4, 2, 2, 3, 2, 1, 0, 1], '1323': [22232124, 2, 2, 2, 3, 2, 1, 2, 4], '1321': [42232101, 4, 2, 2, 3, 2, 1, 0, 1], '1324': [23232112, 2, 3, 2, 3, 2, 1, 1, 2], '195': [24221121, 2, 4, 2, 2, 1, 1, 2, 1], '1121': [21032001, 2, 1, 0, 3, 2, 0, 0, 1], '1122': [21032001, 2, 1, 0, 3, 2, 0, 0, 1], '1123': [23012001, 2, 3, 0, 1, 2, 0, 0, 1], '1124': [24012001, 2, 4, 0, 1, 2, 0, 0, 1], '1125': [33032001, 3, 3, 0, 3, 2, 0, 0, 1], '193': [24221121, 2, 4, 2, 2, 1, 1, 2, 1], '192': [24221141, 2, 4, 2, 2, 1, 1, 4, 1], '115': [10032001, 1, 0, 0, 3, 2, 0, 0, 1], '114': [41022001, 4, 1, 0, 2, 2, 0, 0, 1], '116': [10032001, 1, 0, 0, 3, 2, 0, 0, 1], '111': [21012001, 2, 1, 0, 1, 2, 0, 0, 1], '110': [21012001, 2, 1, 0, 1, 2, 0, 0, 1], '113': [31032001, 3, 1, 0, 3, 2, 0, 0, 1], '112': [21012001, 2, 1, 0, 1, 2, 0, 0, 1], '194': [24221121, 2, 4, 2, 2, 1, 1, 2, 1], '83': [42222101, 4, 2, 2, 2, 2, 1, 0, 1], '313': [21142101, 2, 1, 1, 4, 2, 1, 0, 1], '52': [41122101, 4, 1, 1, 2, 2, 1, 0, 1], '86': [22222101, 2, 2, 2, 2, 2, 1, 0, 1], '831': [42222101, 4, 2, 2, 2, 2, 1, 0, 1], '312': [24222101, 2, 4, 2, 2, 2, 1, 0, 1], '204': [24241121, 2, 4, 2, 4, 1, 1, 2, 1], '832': [42222101, 4, 2, 2, 2, 2, 1, 0, 1], '1712': [22222201, 2, 2, 2, 2, 2, 2, 0, 1], '1711': [22222201, 2, 2, 2, 2, 2, 2, 0, 1], '251': [42333201, 4, 2, 3, 3, 3, 2, 0, 1], '834': [42232101, 4, 2, 2, 3, 2, 1, 0, 1], '256': [34222101, 3, 4, 2, 2, 2, 1, 0, 1], '32': [42223101, 4, 2, 2, 2, 3, 1, 0, 1], '3': [22222101, 2, 2, 2, 2, 2, 1, 0, 1], '203': [24241121, 2, 4, 2, 4, 1, 1, 2, 1], '254': [31422211, 3, 1, 4, 2, 2, 2, 1, 1], '7': [22222101, 2, 2, 2, 2, 2, 1, 0, 1], '1014': [22224101, 2, 2, 2, 2, 4, 1, 0, 1], '92': [21134101, 2, 1, 1, 3, 4, 1, 0, 1], '255': [42222111, 4, 2, 2, 2, 2, 1, 1, 1], '1011': [22322101, 2, 2, 3, 2, 2, 1, 0, 1], '1012': [24222101, 2, 4, 2, 2, 2, 1, 0, 1], '1013': [22232101, 2, 2, 2, 3, 2, 1, 0, 1], '1234': [32142101, 3, 2, 1, 4, 2, 1, 0, 1], '24': [41111111, 4, 1, 1, 1, 1, 1, 1, 1], '1231': [41132101, 4, 1, 1, 3, 2, 1, 0, 1], '1232': [41132101, 4, 1, 1, 3, 2, 1, 0, 1], '1233': [31142101, 3, 1, 1, 4, 2, 1, 0, 1], '34': [42222101, 4, 2, 2, 2, 2, 1, 0, 1], '244': [43232201, 4, 3, 2, 3, 2, 2, 0, 1], '108': [42222101, 4, 2, 2, 2, 2, 1, 0, 1], '27': [33222101, 3, 3, 2, 2, 2, 1, 0, 1], '196': [34221121, 3, 4, 2, 2, 1, 1, 2, 1], '93': [24134101, 2, 4, 1, 3, 4, 1, 0, 1], '243': [42142101, 4, 2, 1, 4, 2, 1, 0, 1], '1411': [32243211, 3, 2, 2, 4, 3, 2, 1, 1], '102': [42222101, 4, 2, 2, 2, 2, 1, 0, 1], '103': [23322101, 2, 3, 3, 2, 2, 1, 0, 1], '100': [22222101, 2, 2, 2, 2, 2, 1, 0, 1], '101': [22224101, 2, 2, 2, 2, 4, 1, 0, 1], '106': [22222121, 2, 2, 2, 2, 2, 1, 2, 1], '107': [24222101, 2, 4, 2, 2, 2, 1, 0, 1], '104': [42222101, 4, 2, 2, 2, 2, 1, 0, 1], '105': [42222101, 4, 2, 2, 2, 2, 1, 0, 1], '1434': [42343211, 4, 2, 3, 4, 3, 2, 1, 1], '38': [32122101, 3, 2, 1, 2, 2, 1, 0, 1], '1432': [32343211, 3, 2, 3, 4, 3, 2, 1, 1], '1433': [32343211, 3, 2, 3, 4, 3, 2, 1, 1], '841': [22222101, 2, 2, 2, 2, 2, 1, 0, 1], '1431': [42343211, 4, 2, 3, 4, 3, 2, 1, 1], '33': [22222101, 2, 2, 2, 2, 2, 1, 0, 1], '1663': [32422101, 3, 2, 4, 2, 2, 1, 0, 1], '1724': [24222241, 2, 4, 2, 2, 2, 2, 4, 1], '30': [22222101, 2, 2, 2, 2, 2, 1, 0, 1], '1722': [42222201, 4, 2, 2, 2, 2, 2, 0, 1], '1723': [22222244, 2, 2, 2, 2, 2, 2, 4, 4], '35': [33212101, 3, 3, 2, 1, 2, 1, 0, 1], '1662': [32222101, 3, 2, 2, 2, 2, 1, 0, 1], '1241': [32222101, 3, 2, 2, 2, 2, 1, 0, 1], '1243': [32242101, 3, 2, 2, 4, 2, 1, 0, 1], '1242': [32242101, 3, 2, 2, 4, 2, 1, 0, 1], '1245': [32222101, 3, 2, 2, 2, 2, 1, 0, 1], '1244': [32422101, 3, 2, 4, 2, 2, 1, 0, 1], '1246': [34222101, 3, 4, 2, 2, 2, 1, 0, 1], '241': [42222212, 4, 2, 2, 2, 2, 2, 1, 2], '1224': [34112101, 3, 4, 1, 1, 2, 1, 0, 1], '1223': [32142101, 3, 2, 1, 4, 2, 1, 0, 1], '1222': [34112101, 3, 4, 1, 1, 2, 1, 0, 1], '1221': [32412101, 3, 2, 4, 1, 2, 1, 0, 1], '334': [24222101, 2, 4, 2, 2, 2, 1, 0, 1], '242': [42222212, 4, 2, 2, 2, 2, 2, 1, 2], '331': [22422101, 2, 2, 4, 2, 2, 1, 0, 1], '333': [21422101, 2, 1, 4, 2, 2, 1, 0, 1], '332': [24222101, 2, 4, 2, 2, 2, 1, 0, 1], '60': [22222101, 2, 2, 2, 2, 2, 1, 0, 1], '61': [22422101, 2, 2, 4, 2, 2, 1, 0, 1], '62': [24222101, 2, 4, 2, 2, 2, 1, 0, 1], '63': [22232101, 2, 2, 2, 3, 2, 1, 0, 1], '64': [22224101, 2, 2, 2, 2, 4, 1, 0, 1], '252': [42143101, 4, 2, 1, 4, 3, 1, 0, 1], '253': [43142102, 4, 3, 1, 4, 2, 1, 0, 2], '175': [33222201, 3, 3, 2, 2, 2, 2, 0, 1], '174': [22232221, 2, 2, 2, 3, 2, 2, 2, 1], '173': [23242201, 2, 3, 2, 4, 2, 2, 0, 1], '172': [32222201, 3, 2, 2, 2, 2, 2, 0, 1], '171': [22222201, 2, 2, 2, 2, 2, 2, 0, 1], '170': [22222201, 2, 2, 2, 2, 2, 2, 0, 1], '1421': [42243211, 4, 2, 2, 4, 3, 2, 1, 1], '1423': [32243211, 3, 2, 2, 4, 3, 2, 1, 1], '1422': [32243211, 3, 2, 2, 4, 3, 2, 1, 1], '1424': [42243211, 4, 2, 2, 4, 3, 2, 1, 1], '862': [22222101, 2, 2, 2, 2, 2, 1, 0, 1], '182': [22231101, 2, 2, 2, 3, 1, 1, 0, 1], '183': [22231101, 2, 2, 2, 3, 1, 1, 0, 1], '180': [22231101, 2, 2, 2, 3, 1, 1, 0, 1], '181': [22231101, 2, 2, 2, 3, 1, 1, 0, 1], '186': [32231101, 3, 2, 2, 3, 1, 1, 0, 1], '871': [24222101, 2, 4, 2, 2, 2, 1, 0, 1], '184': [22231101, 2, 2, 2, 3, 1, 1, 0, 1], '185': [32231101, 3, 2, 2, 3, 1, 1, 0, 1], '1032': [24222101, 2, 4, 2, 2, 2, 1, 0, 1], '1033': [22332101, 2, 2, 3, 3, 2, 1, 0, 1], '1031': [22422101, 2, 2, 4, 2, 2, 1, 0, 1], '311': [22412101, 2, 2, 4, 1, 2, 1, 0, 1], '1034': [24222101, 2, 4, 2, 2, 2, 1, 0, 1], '51': [41122101, 4, 1, 1, 2, 2, 1, 0, 1], '1212': [24112001, 2, 4, 1, 1, 2, 0, 0, 1], '1211': [21412001, 2, 1, 4, 1, 2, 0, 0, 1], '10001': [34222131, 3, 4, 2, 2, 2, 1, 3, 1], '191': [24321121, 2, 4, 3, 2, 1, 1, 2, 1], '6': [22222101, 2, 2, 2, 2, 2, 1, 0, 1], '202': [24241131, 2, 4, 2, 4, 1, 1, 3, 1], '39': [32122101, 3, 2, 1, 2, 2, 1, 0, 1], '190': [24221121, 2, 4, 2, 2, 1, 1, 2, 1], '842': [22222101, 2, 2, 2, 2, 2, 1, 0, 1], '8': [22222101, 2, 2, 2, 2, 2, 1, 0, 1], '164': [32222101, 3, 2, 2, 2, 2, 1, 0, 1], '165': [32222101, 3, 2, 2, 2, 2, 1, 0, 1], '166': [32222101, 3, 2, 2, 2, 2, 1, 0, 1], '314': [23124101, 2, 3, 1, 2, 4, 1, 0, 1], '160': [32222101, 3, 2, 2, 2, 2, 1, 0, 1], '161': [42222101, 4, 2, 2, 2, 2, 1, 0, 1], '162': [32422101, 3, 2, 4, 2, 2, 1, 0, 1], '163': [32422101, 3, 2, 4, 2, 2, 1, 0, 1], '11': [21012001, 2, 1, 0, 1, 2, 0, 0, 1], '10': [22222101, 2, 2, 2, 2, 2, 1, 0, 1], '13': [22222101, 2, 2, 2, 2, 2, 1, 0, 1], '12': [21112001, 2, 1, 1, 1, 2, 0, 0, 1], '15': [24222231, 2, 4, 2, 2, 2, 2, 3, 1], '14': [22233211, 2, 2, 2, 3, 3, 2, 1, 1], '17': [22222201, 2, 2, 2, 2, 2, 2, 0, 1], '16': [32222101, 3, 2, 2, 2, 2, 1, 0, 1], '19': [24221121, 2, 4, 2, 2, 1, 1, 2, 1], '18': [22231101, 2, 2, 2, 3, 1, 1, 0, 1], '863': [22432101, 2, 2, 4, 3, 2, 1, 0, 1], '2041': [24241121, 2, 4, 2, 4, 1, 1, 2, 1], '1454': [42343241, 4, 2, 3, 4, 3, 2, 4, 1], '833': [42242101, 4, 2, 2, 4, 2, 1, 0, 1], '2': [31233111, 3, 1, 2, 3, 3, 1, 1, 1], '1451': [42343241, 4, 2, 3, 4, 3, 2, 4, 1], '1452': [32343241, 3, 2, 3, 4, 3, 2, 4, 1], '1453': [32343241, 3, 2, 3, 4, 3, 2, 4, 1], '31': [22222101, 2, 2, 2, 2, 2, 1, 0, 1], '151': [24222233, 2, 4, 2, 2, 2, 2, 3, 3], '150': [24222231, 2, 4, 2, 2, 2, 2, 3, 1], '153': [24222231, 2, 4, 2, 2, 2, 2, 3, 1], '152': [24222233, 2, 4, 2, 2, 2, 2, 3, 3], '154': [24222231, 2, 4, 2, 2, 2, 2, 3, 1], '10002': [32020101, 3, 2, 0, 2, 0, 1, 0, 1], '10003': [33001011, 3, 3, 0, 0, 1, 0, 1, 1], '37': [32122101, 3, 2, 1, 2, 2, 1, 0, 1], '1661': [34222101, 3, 4, 2, 2, 2, 1, 0, 1], '36': [32122101, 3, 2, 1, 2, 2, 1, 0, 1], '82': [42232101, 4, 2, 2, 3, 2, 1, 0, 1], '2042': [24341431, 2, 4, 3, 4, 1, 4, 3, 1], '90': [21134101, 2, 1, 1, 3, 4, 1, 0, 1], '234': [24231111, 2, 4, 2, 3, 1, 1, 1, 1], '1721': [42222201, 4, 2, 2, 2, 2, 2, 0, 1], '231': [21421211, 2, 1, 4, 2, 1, 2, 1, 1], '232': [24111111, 2, 4, 1, 1, 1, 1, 1, 1], '233': [30341211, 3, 0, 3, 4, 1, 2, 1, 1], '1051': [42222101, 4, 2, 2, 2, 2, 1, 0, 1], '1052': [42222101, 4, 2, 2, 2, 2, 1, 0, 1], '1053': [22332101, 2, 2, 3, 3, 2, 1, 0, 1], '1054': [22422101, 2, 2, 4, 2, 2, 1, 0, 1], '1055': [22222101, 2, 2, 2, 2, 2, 1, 0, 1], '1056': [24222101, 2, 4, 2, 2, 2, 1, 0, 1], '46': [22222101, 2, 2, 2, 2, 2, 1, 0, 1], '44': [21122121, 2, 1, 1, 2, 2, 1, 2, 1], '45': [21122101, 2, 1, 1, 2, 2, 1, 0, 1], '42': [21122121, 2, 1, 1, 2, 2, 1, 2, 1], '43': [21122121, 2, 1, 1, 2, 2, 1, 2, 1], '40': [21122101, 2, 1, 1, 2, 2, 1, 0, 1], '41': [21122101, 2, 1, 1, 2, 2, 1, 0, 1], '1': [21144101, 2, 1, 1, 4, 4, 1, 0, 1], '1444': [32343241, 3, 2, 3, 4, 3, 2, 4, 1], '1443': [32343241, 3, 2, 3, 4, 3, 2, 4, 1], '1442': [32343241, 3, 2, 3, 4, 3, 2, 4, 1], '1441': [42343241, 4, 2, 3, 4, 3, 2, 4, 1], '9': [21134101, 2, 1, 1, 3, 4, 1, 0, 1], '85': [22422101, 2, 2, 4, 2, 2, 1, 0, 1], '201': [24241131, 2, 4, 2, 4, 1, 1, 3, 1], '200': [24241121, 2, 4, 2, 4, 1, 1, 2, 1], '144': [32343241, 3, 2, 3, 4, 3, 2, 4, 1], '145': [32343241, 3, 2, 3, 4, 3, 2, 4, 1], '142': [32243211, 3, 2, 2, 4, 3, 2, 1, 1], '143': [32343211, 3, 2, 3, 4, 3, 2, 1, 1], '140': [42233211, 4, 2, 2, 3, 3, 2, 1, 1], '141': [32243211, 3, 2, 2, 4, 3, 2, 1, 1], '75': [41222101, 4, 1, 2, 2, 2, 1, 0, 1], '74': [24222101, 2, 4, 2, 2, 2, 1, 0, 1], '73': [22242101, 2, 2, 2, 4, 2, 1, 0, 1], '72': [24222101, 2, 4, 2, 2, 2, 1, 0, 1], '71': [22422101, 2, 2, 4, 2, 2, 1, 0, 1], '70': [22222101, 2, 2, 2, 2, 2, 1, 0, 1], '4': [21122101, 2, 1, 1, 2, 2, 1, 0, 1], '1043': [22242101, 2, 2, 2, 4, 2, 1, 0, 1], '1042': [42222101, 4, 2, 2, 2, 2, 1, 0, 1], '1041': [42222101, 4, 2, 2, 2, 2, 1, 0, 1], '80': [22222101, 2, 2, 2, 2, 2, 1, 0, 1], '1044': [42222101, 4, 2, 2, 2, 2, 1, 0, 1], '356': [34222101, 3, 4, 2, 2, 2, 1, 0, 1], '355': [42222101, 4, 2, 2, 2, 2, 1, 0, 1], '354': [32422101, 3, 2, 4, 2, 2, 1, 0, 1], '353': [32142101, 3, 2, 1, 4, 2, 1, 0, 1], '352': [42242101, 4, 2, 2, 4, 2, 1, 0, 1], '351': [32322101, 3, 2, 3, 2, 2, 1, 0, 1], '874': [24222101, 2, 4, 2, 2, 2, 1, 0, 1]}

class GDELT_Record:
    def __init__(self, record=None):
        self.__source_text = record

        try: self.GLOBALEVENTID = int(self.__source_text[0]) 
        except: pass 
        try: self.SQLDATE = int(self.__source_text[1]) 
        except: pass 
        try: self.MonthYear = int(self.__source_text[2]) 
        except: pass 
        try: self.Year = int(self.__source_text[3]) 
        except: pass 
        try: self.FractionDate = float(self.__source_text[4]) 
        except: pass 
        try: self.Actor1Code = str(self.__source_text[5]) 
        except: pass 
        try: self.Actor1Name = str(self.__source_text[6]) 
        except: pass 
        try: self.Actor1CountryCode = str(self.__source_text[7]) 
        except: pass 
        try: self.Actor1KnownGroupCode = str(self.__source_text[8]) 
        except: pass 
        try: self.Actor1EthnicCode = str(self.__source_text[9]) 
        except: pass 
        try: self.Actor1Religion1Code = str(self.__source_text[10]) 
        except: pass 
        try: self.Actor1Religion2Code = str(self.__source_text[11]) 
        except: pass 
        try: self.Actor1Type1Code = str(self.__source_text[12]) 
        except: pass 
        try: self.Actor1Type2Code = str(self.__source_text[13]) 
        except: pass 
        try: self.Actor1Type3Code = str(self.__source_text[14]) 
        except: pass 
        try: self.Actor2Code = str(self.__source_text[15]) 
        except: pass 
        try: self.Actor2Name = str(self.__source_text[16]) 
        except: pass 
        try: self.Actor2CountryCode = str(self.__source_text[17]) 
        except: pass 
        try: self.Actor2KnownGroupCode = str(self.__source_text[18]) 
        except: pass 
        try: self.Actor2EthnicCode = str(self.__source_text[19]) 
        except: pass 
        try: self.Actor2Religion1Code = str(self.__source_text[20]) 
        except: pass 
        try: self.Actor2Religion2Code = str(self.__source_text[21]) 
        except: pass 
        try: self.Actor2Type1Code = str(self.__source_text[22]) 
        except: pass 
        try: self.Actor2Type2Code = str(self.__source_text[23]) 
        except: pass 
        try: self.Actor2Type3Code = str(self.__source_text[24]) 
        except: pass 
        try: self.IsRootEvent = int(self.__source_text[25]) 
        except: pass 
        try: self.EventCode = str(self.__source_text[26]) 
        except: pass 
        try: self.EventBaseCode = str(self.__source_text[27]) 
        except: pass 
        try: self.EventRootCode = str(self.__source_text[28]) 
        except: pass 
        try: self.QuadClass = int(self.__source_text[29]) 
        except: pass 
        try: self.GoldsteinScale = float(self.__source_text[30]) 
        except: pass 
        try: self.NumMentions = int(self.__source_text[31]) 
        except: pass 
        try: self.NumSources = int(self.__source_text[32]) 
        except: pass 
        try: self.NumArticles = int(self.__source_text[33]) 
        except: pass 
        try: self.AvgTone = float(self.__source_text[34]) 
        except: pass 
        try: self.Actor1Geo_Type = int(self.__source_text[35]) 
        except: pass 
        try: self.Actor1Geo_FullName = str(self.__source_text[36]) 
        except: pass 
        try: self.Actor1Geo_CountryCode = str(self.__source_text[37]) 
        except: pass 
        try: self.Actor1Geo_ADM1Code = str(self.__source_text[38]) 
        except: pass 
        try: self.Actor1Geo_ADM2Code = str(self.__source_text[39]) 
        except: pass 
        try: self.Actor1Geo_Lat = float(self.__source_text[40]) 
        except: pass 
        try: self.Actor1Geo_Long = float(self.__source_text[41]) 
        except: pass 
        try: self.Actor1Geo_FeatureID = str(self.__source_text[42]) 
        except: pass 
        try: self.Actor2Geo_Type = int(self.__source_text[43]) 
        except: pass 
        try: self.Actor2Geo_FullName = str(self.__source_text[44]) 
        except: pass 
        try: self.Actor2Geo_CountryCode = str(self.__source_text[45]) 
        except: pass 
        try: self.Actor2Geo_ADM1Code = str(self.__source_text[46]) 
        except: pass 
        try: self.Actor2Geo_ADM2Code = str(self.__source_text[47]) 
        except: pass 
        try: self.Actor2Geo_Lat = float(self.__source_text[48]) 
        except: pass 
        try: self.Actor2Geo_Long = float(self.__source_text[49]) 
        except: pass 
        try: self.Actor2Geo_FeatureID = str(self.__source_text[50]) 
        except: pass 
        try: self.ActionGeo_Type = int(self.__source_text[51]) 
        except: pass 
        try: self.ActionGeo_FullName = str(self.__source_text[52]) 
        except: pass 
        try: self.ActionGeo_CountryCode = str(self.__source_text[53]) 
        except: pass 
        try: self.ActionGeo_ADM1Code = str(self.__source_text[54]) 
        except: pass 
        try: self.ActionGeo_ADM2Code = str(self.__source_text[55]) 
        except: pass 
        try: self.ActionGeo_Lat = float(self.__source_text[56]) 
        except: pass 
        try: self.ActionGeo_Long = float(self.__source_text[57]) 
        except: pass 
        try: self.ActionGeo_FeatureID = str(self.__source_text[58]) 
        except: pass 
        try: self.DATEADDED = int(self.__source_text[59]) 
        except: pass 
        try: self.SOURCEURL = str(self.__source_text[60]) 
        except: pass 
  
    def to_GeoJSON(self):
        properties = {}
        coord_list = []

        for k,v in self.__dict__.items():
            if v != '' and k != "GeoJSON":
                properties[k] = v
            
        try:
            if self.Actor1Geo_Lat != '' and self.Actor1Geo_Long:
                coord_list.append((self.Actor1Geo_Long,self.Actor1Geo_Lat))
        except:
            pass

        try:
            if self.Actor2Geo_Lat != '' and self.Actor2Geo_Long:
                coord_list.append((self.Actor2Geo_Long,self.Actor2Geo_Lat))
        except:
            pass

        try:
            if self.ActionGeo_Lat != '' and self.ActionGeo_Long:
                coord_list.append((self.ActionGeo_Long,self.ActionGeo_Lat))
        except:
            pass

        geom = MultiPoint(coord_list)
        self.geojson = Feature(geometry=geom, properties=properties)

        return self.geojson

    def map_pmesii(self):
        
        try:
            try:
                actor1_mapping = pmesii_dict[self.EventCode]
            except:
                actor1_mapping = pmesii_dict['0']
            self.pmesii_code = actor1_mapping[0]
            self.pmesii_pol = actor1_mapping[1]
            self.pmesii_mil = actor1_mapping[2]
            self.pmesii_econ = actor1_mapping[3]
            self.pmesii_social = actor1_mapping[4]
            self.pmesii_infrastructure = actor1_mapping[5]
            self.pmesii_information = actor1_mapping[6]
            self.pmesii_physenv = actor1_mapping[7]
            self.pmesii_time = actor1_mapping[8]
        except Exception as e:
            print(e)
            exit()

def main():
    geojsons = []
    
    doc_folder = r"C:\raw_files"
    before = {}
    # Empty counter object used to keep track of how many documents have been processed.
    count = 0

    while True:
    
        # Compares the folder contents after the sleep to what existed beforehand, and makes a list of adds and removes
        after = dict([(f, None) for f in os.listdir(doc_folder)])
        added = [f for f in after if not f in before]
        removed = [f for f in before if not f in after]

        if added: print("Added: ", ", ".join (added))
        if removed: print("Removed: ", ", ".join (removed))
        before = after

        for doc in added:
            csv_file = os.path.join(r"C:\raw_files",doc)
            try:
                with open(csv_file, 'r') as f:
                    csvreader = csv.reader(f, delimiter='\t', quotechar='|')
                    for row in csvreader:
                        record = GDELT_Record(record=row)
                        record.map_pmesii()
                        geojsons.append(record.to_GeoJSON())

                geojson_to_write = FeatureCollection(geojsons)

                out_file = os.path.join(r'C:\GeoJSON', doc + '.geojson')

                with open(out_file, 'w') as w:
                    geojson.dump(geojson_to_write, w)
                    
                shutil.move(csv_file, r'C:\complete_csv')
            except Exception as e:
                print(e)
                shutil.move(csv_file, r'C:\errors')

if __name__ == '__main__':
    main()

